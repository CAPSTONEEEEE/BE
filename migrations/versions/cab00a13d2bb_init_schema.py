"""init schema

Revision ID: cab00a13d2bb
Revises: 
Create Date: 2025-08-29 11:31:50.607775

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'cab00a13d2bb'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=60), nullable=False),
    sa.Column('slug', sa.String(length=60), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_categories')),
    sa.UniqueConstraint('name', name=op.f('uq_categories_name')),
    sa.UniqueConstraint('slug', name=op.f('uq_categories_slug'))
    )
    with op.batch_alter_table('categories', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_categories_id'), ['id'], unique=False)

    op.create_table('recommendations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=160), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('reason', sa.String(length=500), nullable=True),
    sa.Column('tags', sa.String(length=500), nullable=True),
    sa.Column('image_url', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_recommendations'))
    )
    with op.batch_alter_table('recommendations', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_recommendations_id'), ['id'], unique=False)

    op.create_table('regions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('code', sa.String(length=20), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_regions')),
    sa.UniqueConstraint('code', name=op.f('uq_regions_code')),
    sa.UniqueConstraint('name', name='uq_regions_name')
    )
    with op.batch_alter_table('regions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_regions_id'), ['id'], unique=False)

    op.create_table('festivals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=160), nullable=False),
    sa.Column('location', sa.String(length=200), nullable=True),
    sa.Column('region_id', sa.Integer(), nullable=True),
    sa.Column('event_start_date', sa.Date(), nullable=False),
    sa.Column('event_end_date', sa.Date(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('image_url', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['region_id'], ['regions.id'], name=op.f('fk_festivals_region_id_regions')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_festivals'))
    )
    with op.batch_alter_table('festivals', schema=None) as batch_op:
        batch_op.create_index('idx_festivals_title_date', ['title', 'event_start_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_festivals_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_festivals_region_id'), ['region_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_festivals_title'), ['title'], unique=False)

    op.create_table('markets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('address', sa.String(length=255), nullable=True),
    sa.Column('lat', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('lng', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('phone', sa.String(length=40), nullable=True),
    sa.Column('image_url', sa.String(length=500), nullable=True),
    sa.Column('region_id', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['region_id'], ['regions.id'], name=op.f('fk_markets_region_id_regions'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_markets')),
    sa.UniqueConstraint('name', 'region_id', name='uq_markets_name_region')
    )
    with op.batch_alter_table('markets', schema=None) as batch_op:
        batch_op.create_index('idx_markets_active_region', ['is_active', 'region_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_markets_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_markets_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_markets_name'), ['name'], unique=False)
        batch_op.create_index(batch_op.f('ix_markets_region_id'), ['region_id'], unique=False)

    op.create_table('products',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=140), nullable=False),
    sa.Column('summary', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('price', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('stock', sa.Integer(), nullable=False),
    sa.Column('unit', sa.String(length=30), nullable=True),
    sa.Column('image_urls', sa.JSON(), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'OUT_OF_STOCK', name='productstatus', native_enum=False, length=20), nullable=False),
    sa.Column('market_id', sa.Integer(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('region_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.CheckConstraint('price >= 0', name=op.f('ck_products_ck_products_price_nonnegative')),
    sa.CheckConstraint('stock >= 0', name=op.f('ck_products_ck_products_stock_nonnegative')),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name=op.f('fk_products_category_id_categories'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['market_id'], ['markets.id'], name=op.f('fk_products_market_id_markets'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['region_id'], ['regions.id'], name=op.f('fk_products_region_id_regions'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_products'))
    )
    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.create_index('idx_products_market_category', ['market_id', 'category_id', 'status'], unique=False)
        batch_op.create_index('idx_products_search', ['name', 'status', 'price'], unique=False)
        batch_op.create_index(batch_op.f('ix_products_category_id'), ['category_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_products_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_products_market_id'), ['market_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_products_name'), ['name'], unique=False)
        batch_op.create_index(batch_op.f('ix_products_price'), ['price'], unique=False)
        batch_op.create_index(batch_op.f('ix_products_region_id'), ['region_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_products_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_products_stock'), ['stock'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_products_stock'))
        batch_op.drop_index(batch_op.f('ix_products_status'))
        batch_op.drop_index(batch_op.f('ix_products_region_id'))
        batch_op.drop_index(batch_op.f('ix_products_price'))
        batch_op.drop_index(batch_op.f('ix_products_name'))
        batch_op.drop_index(batch_op.f('ix_products_market_id'))
        batch_op.drop_index(batch_op.f('ix_products_id'))
        batch_op.drop_index(batch_op.f('ix_products_category_id'))
        batch_op.drop_index('idx_products_search')
        batch_op.drop_index('idx_products_market_category')

    op.drop_table('products')
    with op.batch_alter_table('markets', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_markets_region_id'))
        batch_op.drop_index(batch_op.f('ix_markets_name'))
        batch_op.drop_index(batch_op.f('ix_markets_is_active'))
        batch_op.drop_index(batch_op.f('ix_markets_id'))
        batch_op.drop_index('idx_markets_active_region')

    op.drop_table('markets')
    with op.batch_alter_table('festivals', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_festivals_title'))
        batch_op.drop_index(batch_op.f('ix_festivals_region_id'))
        batch_op.drop_index(batch_op.f('ix_festivals_id'))
        batch_op.drop_index('idx_festivals_title_date')

    op.drop_table('festivals')
    with op.batch_alter_table('regions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_regions_id'))

    op.drop_table('regions')
    with op.batch_alter_table('recommendations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_recommendations_id'))

    op.drop_table('recommendations')
    with op.batch_alter_table('categories', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_categories_id'))

    op.drop_table('categories')
    # ### end Alembic commands ###
